---
layout: post
title:  "제어문 (for문)"
date:   2022-03-22 23:53:20 +0900
categories: Python
---

<hr>


# for문

## for문의 기본구조

for문의 기본 구조는 다음과 같다.

```python
for 변수in 리스트(또는 튜플, 문자열):
    수행할 문장1
    수행할 문장2
    ...
```

## 예제를 통한 for문 이해

### 1. 전형적인 for문

```python
>>> test_list = ['one', 'two', 'three'] 
>>> for i in test_list: 
...     print(i)
... 
one 
two 
three
```

`['one', 'two', 'three']`
 리스트의 첫 번째 요소인 'one'이 먼저 i 변수에 대입된 후 `print(i)` 문장을 수행한다. 다음에 두 번째 요소 'two'가 i 변수에 대입된 후 `print(i)` 문장을 수행하고 리스트의 마지막 요소까지 이것을 반복한다.

### 2. 다양한 for문의 사용

```python
>>> a = [(1,2), (3,4), (5,6)]
>>> for (first, last) in a:
...     print(first + last)
...
3
7
11
```

위 예는 a 리스트의 요솟값이 튜플이기 때문에 각각의 요소가 자동으로 (first, last) 변수에 대입된다.

> ※ 이 예는 02장에서 살펴본 튜플을 사용한 변수값 대입 방법과 매우 비슷한 경우이다.>>> (first, last) = (1, 2)
> 

### 3. for문의 응용

for문의 쓰임새를 알기 위해 다음을 가정해 보자.

```
"총 5명의 학생이 시험을 보았는데 시험 점수가 60점이 넘으면 합격이고 그렇지 않으면 불합격이다. 합격인지 불합격인지 결과를 보여 주시오."

```

우선 학생 5명의 시험 점수를 리스트로 표현해 보았다.

```python
marks = [90, 25, 67, 45, 80]

```

1번 학생은 90점이고 5번 학생은 80점이다.

이런 점수를 차례로 검사해서 합격했는지 불합격했는지 통보해 주는 프로그램을 만들어 보자. 역시 IDLE 에디터로 작성한다.

```python
# marks1.py
marks = [90, 25, 67, 45, 80]

number = 0
for markin marks:
    number = number +1
if mark >= 60:
        print("%d번 학생은 합격입니다." % number)
else:
        print("%d번 학생은 불합격입니다." % number)

```

각각의 학생에게 번호를 붙여 주기 위해 number 변수를 사용하였다. 점수 리스트 marks에서 차례로 점수를 꺼내어 mark라는 변수에 대입하고 for문 안의 문장들을 수행한다. 우선 for문이 한 번씩 수행될 때마다 number는 1씩 증가한다.

이 프로그램을 실행하면 mark가 60 이상일 때 합격 메시지를 출력하고 60을 넘지 않을 때 불합격 메시지를 출력한다. 명령 프롬프트 창을 열어 실행해 보자.

## for문과 continue

while문에서 살펴본 continue문을 for문에서도 사용할 수 있다. 즉 for문 안의 문장을 수행하는 도중에 continue문을 만나면 for문의 처음으로 돌아가게 된다.

```python
# marks2.py
marks = [90, 25, 67, 45, 80]

number = 0
for markin marks:
    number = number +1
if mark < 60:
continue
    print("%d번 학생 축하합니다. 합격입니다. " % number)

```

점수가 60점 이하인 학생일 경우에는 `mark < 60`이 참이 되어 continue문이 수행된다. 따라서 축하 메시지를 출력하는 부분인 print문을 수행하지 않고 for문의 처음으로 돌아가게 된다.

## range함수

for문은 숫자 리스트를 자동으로 만들어 주는 range 함수와 함께 사용하는 경우가 많다. 다음은 range 함수의 간단한 사용법이다.

```python
>>> a = range(10)
>>> a
range(0, 10)

```

range(10)은 0부터 10 미만의 숫자를 포함하는 range 객체를 만들어 준다.

시작 숫자와 끝 숫자를 지정하려면 range(시작 숫자, 끝 숫자) 형태를 사용하는데, 이때 끝 숫자는 포함되지 않는다.

```python
>>> a = range(1, 11)
>>> a
range(1, 11)
```

## range함수 예시

for와 range 함수를 사용하면 1부터 10까지 더하는 것을 다음과 같이 쉽게 구현할 수 있다.

```
>>> add = 0
>>>for iin range(1, 11):
...     add = add + i
...
>>> print(add)
55

```

`range(1, 11)`은 숫자 1부터 10까지(1 이상 11 미만)의 숫자를 데이터로 갖는 객체이다. 따라서 위 예에서 i 변수에 리스트의 숫자가 1부터 10까지 하나씩 차례로 대입되면서 `add = add + i` 문장을 반복적으로 수행하고 add는 최종적으로 55가 된다.

## 리스트 내포 사용하기

리스트 안에 for문을 포함하는 리스트 내포(List comprehension)를 사용하면 좀 더 편리하고 직관적인 프로그램을 만들 수 있다. 다음 예제를 보자.

```python
>>> a = [1,2,3,4]
>>> result = []
>>>for numin a:
...     result.append(num*3)
...
>>> print(result)
[3, 6, 9, 12]

```

위 예제는 a 리스트의 각 항목에 3을 곱한 결과를 result 리스트에 담는 예제이다.

이것을 리스트 내포를 사용하면 다음과 같이 간단히 해결할 수 있다.

```python
>>> a = [1,2,3,4]
>>> result = [num * 3for numin a]
>>> print(result)
[3, 6, 9, 12]
```

만약 [1,2,3,4] 중에서 짝수에만 3을 곱하여 담고 싶다면 다음과 같이 리스트 내포 안에 "if 조건"을 사용할 수 있다.

```python
>>> a = [1,2,3,4]
>>> result = [num * 3for numin aif num % 2 == 0]
>>> print(result)
[6, 12]

```

리스트 내포의 일반 문법은 다음과 같다. "if 조건" 부분은 앞의 예제에서 볼 수 있듯이 생략할 수 있다.

```
[표현식 for 항목 in 반복가능객체 if 조건문]
```

조금 복잡하지만 for문을 2개 이상 사용하는 것도 가능하다. for문을 여러 개 사용할 때의 문법은 다음과 같다.

```python
[표현식for 항목1in 반복가능객체1if 조건문1
for 항목2in 반복가능객체2if 조건문2
        ...
for 항목nin 반복가능객체nif 조건문n]

```

만약 구구단의 모든 결과를 리스트에 담고 싶다면 리스트 내포를 사용하여 다음과 같이 간단하게 구현할 수도 있다.

```python
>>> result = [x*yfor xin range(2,10)
...for yin range(1,10)]
>>> print(result)
[2, 4, 6, 8, 10, 12, 14, 16, 18, 3, 6, 9, 12, 15, 18, 21, 24, 27, 4, 8, 12, 16,
20, 24, 28, 32, 36, 5, 10, 15, 20, 25, 30, 35, 40, 45, 6, 12, 18, 24, 30, 36, 42
, 48, 54, 7, 14, 21, 28, 35, 42, 49, 56, 63, 8, 16, 24, 32, 40, 48, 56, 64, 72,
9, 18, 27, 36, 45, 54, 63, 72, 81]

```

지금껏 우리는 프로그램 흐름을 제어하는 if문, while문, for문에 대해 알아보았다. 아마도 여러분은 while문과 for문을 보면서 2가지가 아주 비슷하다는 느낌을 받았을 것이다. 실제로 for문을 사용한 부분을 while문으로 바꿀 수 있는 경우도 많고, while문을 for문으로 바꾸어서 사용할 수 있는 경우도 많다.