---
layout: post
title:  "자료형(숫자, 문자열)"
date:   2022-03-10 23:36:20 +0900
categories: Python
---
# 자료형

---

# 숫자형

숫자형이란 숫자 형태로 이루어진 자료형으로 정수, 실수, 8진수, 16진수가 있다.

| 항목 | 사용예 |
| --- | --- |
| 정수 | 123, -345, 0 |
| 실수 | 123.45, -1234.5, 3.4e10 |
| 8진수 | 0o34, 0o25 |
| 10진수 | 0x2A, 0xFF |

```python
# 정수
a = 123
a = -178
a = 0

# 실수 (소수점)
a = 1.2
a = -3.45

# 실수 (지수표현식) 
a = 4.24E10
a = 4.24e-10

# 8진수, 16진수
a = 0x8ff
b = 0xABC
```

### 사칙연산

계산기와 같이 ( `+`, `-`, `/`, `*` )가 가능하다. 나누기 시 실수형으로 반환한다.

### 제곱연산

`**` 연산자는 `x**y` 와 같이 사용시 x의 y제곱 값을 돌려준다.

### % 연산자

`%` 는 나눗셈의 나머지 값을 반환하는 연산자이다.

### // 연산자

`//`  연산자는 나눗셈의 몫을 반환하는 연산자이다.

---

# 문자열

### 문자열 이란

문자열(String)이란 문자, 단어등으로 구성된 문자들의 집합을 말한다.

## 문자열 사용방법

파이썬에서 문자열을 만드는 법은 총 네가지이다.

1. 큰 따옴표 (`”`)로 양쪽 둘러싸기
2. 작은 따옴표(`’`)로 양쪽 둘러싸기
3. 큰 따옴표 3개를 연속(`”””`)로 써서 양쪽 둘러싸기
4. 작은 따옴표 3개를 연속(`’’’`)로 써서 양쪽 둘러싸기

### 문자열 안에 큰 따옴표나 작은 따옴표를 포함시키고 싶을 때

1. 문자열에 작은 따옴표 (`’`) 포함 시키려면 문자열을 큰 따옴표로 감싼다.
2. 문자열에 큰 따옴표 (`”`) 포함 시키려면 문자열을 작은 따옴표로 감싼다.
3. 백슬래시를 이용하여 포함시킬 수 있다.

```python
# 1
"Python's favorite food is perl"
# 2
'"Python is very easy." he says.'
# 3
'Python\'s favorite food is perl'
"\"Python is very easy.\" he says."
```

### 여러 줄인 문자열을 변수에 대입하고 싶을 때

1. 줄을 바꾸기 위한 이스케이프 코드 \n 삽입하기
2. 연속된 작은 따옴표 3개 (`’’’`) 또는 큰 따옴표 3개 (`”””`) 사용하기

```python
# 1

multiline = "Life is too short\nYou need python"

# 2
multiline='''
	Life is too short
	You need python
	'''
multiline="""
	Life is too short
	You need python
	"""
```

## 문자열 연산하기

파이썬에서는 문자열을 더하거나 곱할 수 있다.

### 문자열 더해서 연결하기

```python
>>> head = "Python"
>>> tail = " is fun!"
>>> head + tail
'Python is fun!'
```

### 문자열 곱하기

```python
>>> a = "python"
>>> a * 2
'pythonpython'
```

### 문자열 곱하기 응용

```python
print("=" * 50)
print("My Program")
print("=" * 50)

# result
==================================================
My Program
==================================================
```

### 문자열 길이 구하기

문자열의 길이는 다음과 같이 len 함수를 활용하여 구할 수 있다.

```python
>>> a = "Life is too short"
>>> len(a)
17
```

## 문자열 인덱싱과 슬라이싱

인덱싱(Indexing)이란 무언가를 “가리킨다”는 의미이고, 슬라이싱(slicing)은 무언가를 “잘라낸다”는 의미이다.

### 문자열 인덱싱

문자열이란 문자배열과 같아 이와같이 사용이 가능하다.

```python
>>> a = "Life is too short, You need Python"
>>> a[0]
'L'
>>> a[12]
's'
>>> a[-1]
'n'
```

### 문자열 슬라이싱

파이썬에서는 문자열 슬라이싱을 이와같이 처리한다.

```python
>>> a = "Life is too short, You need Python"
>>> a[0:4]
'Life'

>>> a[19:]
'You need Python'

>>> a[:17]
'Life is too short'

>>> a[19:-7]
'You need'
```

## 문자열 포매팅

문자열 포매팅이란 문자열에 어떠한 값을 삽입하는 방법이다.

### 문자열 포매팅 따라하기

1. 숫자 바로 대입
2. 문자열 바로 대입
3. 숫자 값을 나타내는 변수로 대입
4. 2개 이상의 값 넣기

```python
# 1
>>> "I eat %d apples." % 3
'I eat 3 apples.'

# 2
>>> "I eat %s apples." % "five"
'I eat five apples.'

# 3
>>> number = 3
>>> "I eat %d apples." % number
'I eat 3 apples.'

# 4
>>> number = 10
>>> day = "three"
>>> "I ate %d apples. so I was sick for %s days." % (number, day)
'I ate 10 apples. so I was sick for three days.'
```

### 문자열 포맷 코드

| 코드 | 설명 |
| --- | --- |
| %s | 문자열(String) |
| %c | 문자 1개(Character) |
| %d | 정수 (Integer) |
| %f | 부동 소수 (floating-point) |
| %o | 8진수 |
| %x | 16진수 |
| %% | Literal % (문자 % 자체) |

%s 코드는 어떤 형태의 값이든 넣을 수 있다.

### 포맷코드와 숫자 함께 사용하기

1. 정렬과 공백
2. 소수점 표현하기

```python
# 1
>>> "%10s" % "hi"
'        hi'

>>> "%-10sjane." % 'hi'
'hi        jane.'

# 2
>>> "%0.4f" % 3.42134234
'3.4213'

>>> "%10.4f" % 3.42134234
'    3.4213'
```

## format 함수를 사용한 포매팅

### 숫자 바로 대입하기

```python
>>> "I eat {0} apples".format(3)
'I eat 3 apples'
```

### 문자열 바로 대입하기

```python
>>> "I eat {0} apples".format("five")
'I eat five apples'
```

### 숫자 값을 가진 변수로 대입하기

```python
>>> number = 3
>>> "I eat {0} apples".format(number)
'I eat 3 apples'
```

### 이름으로 넣기

인덱스 항목 대신 더 편리한 {name} 형태를 사용하는 방법도 있다. {name} 형태를 사용할 경우 format 함수에는 반드시 name=value 와 같은 형태의 입력값이 있어야만 한다.

```python
>>> "I ate {number} apples. so I was sick for {day} days.".format(number=10, day=3)
'I ate 10 apples. so I was sick for 3 days.'
```

### 인덱스와 이름 혼용해서 넣기

```python
>>> "I ate {0} apples. so I was sick for {day} days.".format(10, day=3)
'I ate 10 apples. so I was sick for 3 days.'
```

### 왼쪽 정렬

```python
>>> "{0:<10}".format("hi")
'hi        '
```

### 오른쪽 정렬

```python
>>> "{0:>10}".format("hi")
'        hi'
```

### 가운데 정렬

```python
>>> "{0:^10}".format("hi")
'    hi    '
```

### 공백 채우기

```python
>>> "{0:=^10}".format("hi")
'====hi===='
>>> "{0:!<10}".format("hi")
'hi!!!!!!!!'
```

### 소수점 표현하기

```python
>>> y = 3.42134234
>>> "{0:0.4f}".format(y)
'3.4213'

>>> "{0:10.4f}".format(y)
'    3.4213'
```

### { 또는 } 문자 표현하기

`{ }` 와 같은 중괄호(brace) 문자를 포매팅 문자가 아닌 문자 그대로 사용하고 싶은 경우에는 위 예의 `{% raw %}{{ }}{% endraw %}` 처럼 2개를 연속해서 사용하면 된다.

```python
>>> "{{ and }}".format()
'{ and }'
```

### f 문자열 포매팅

파이썬 3.6 버전부터는 f 문자열 포매팅 기능을 사용할 수 있다. 파이썬 3.6 미만 버전에서는 사용할 수 없는 기능이므로 주의해야 한다.

다음과 같이 문자열 앞에 f 접두사를 붙이면 f 문자열 포매팅 기능을 사용할 수 있다.

```python
>>> name = '홍길동'
>>> age = 30
>>> f'나의 이름은 {name}입니다. 나이는 {age}입니다.'
'나의 이름은 홍길동입니다. 나이는 30입니다.'
```

## 문자열 관련 함수들

### 문자 개수 세기 (count)

```python
>>> a = "hobby"
>>> a.count('b')
2
```

### 위치 알려주기 (find, index)

```python
>>> a = "Python is the best choice"
>>> a.find('b')
14
>>> a.find('k')
-1
```

문자열 중 문자 b가 처음으로 나온 위치를 반환한다. 만약 찾는 문자나 문자열이 존재하지 않는다면 -1을 반환한다.

```python
>>> a = "Life is too short"
>>> a.index('t')
8
>>> a.index('k')
Traceback (most recent call last):
File "<stdin>", line 1, in <module>
ValueError: substring not found
```

문자열 중 문자 t가 맨 처음으로 나온 위치를 반환한다. 만약 찾는 문자나 문자열이 존재하지 않는다면 오류를 발생시킨다. 앞의 find 함수와 다른 점은 문자열 안에 존재하지 않는 문자를 찾으면 오류가 발생한다는 점이다.

### 문자열 삽입 (join)

```python
>>> ",".join('abcd')
'a,b,c,d'
```

### 소문자를 대문자로 바꾸기 (upper)

```python
>>> a = "hi"
>>> a.upper()
'HI'
```

### 대문자를 소문자로 바꾸기 (lower)

```python
>>> a = "HI"
>>> a.lower()
'hi'
```

### 공백 지우기

```python
# 왼쪽 공백 지우기
>>> a = " hi "
>>> a.lstrip()
'hi '

# 오른쪽 공백 지우기
>>> a= " hi "
>>> a.rstrip()
' hi'

# 양쪽 공백 지우기
>>> a = " hi "
>>> a.strip()
'hi'
```

### 문자열 바꾸기 (replace)

```python
>>> a = "Life is too short"
>>> a.replace("Life", "Your leg")
'Your leg is too short'
```

replace(바뀌게 될 문자열, 바꿀 문자열)처럼 사용해서 문자열 안의 특정한 값을 다른 값으로 치환해 준다.

### 문자열 나누기 (split)

```python
>>> a = "Life is too short"
>>> a.split()
['Life', 'is', 'too', 'short']
>>> b = "a:b:c:d"
>>> b.split(':')
['a', 'b', 'c', 'd']
```

split 함수는 `a.split()`처럼 괄호 안에 아무 값도 넣어 주지 않으면 공백(스페이스, 탭, 엔터 등)을 기준으로 문자열을 나누어 준다.

만약 `b.split(':')`처럼 괄호 안에 특정 값이 있을 경우에는 괄호 안의 값을 구분자로 해서 문자열을 나누어 준다.

[출처]
<https://wikidocs.net/12>