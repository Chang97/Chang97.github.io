---
layout: post
title:  "제어문 (if문)"
date:   2022-03-16 22:10:20 +0900
categories: Python
---

<hr>


# if문

프로그래밍에서 조건을 판단하여 해당 조건에 맞는 상황을 수행하는 데 쓰는 것이 바로 if문이다.

## if문의 기본 구조

다음은 if와 else를 사용한 조건문의 기본 구조이다.

```
if 조건문:
    수행할 문장1
    수행할 문장2
    ...
else:
    수행할 문장A
    수행할 문장B
    ...

```

조건문을 테스트해서 참이면 if문 바로 다음 문장(if 블록)들을 수행하고, 조건문이 거짓이면 else문 다음 문장(else 블록)들을 수행하게 된다. 그러므로 else문은 if문 없이 독립적으로 사용할 수 없다.

## 들여쓰기

if문을 만들 때는 if 조건문: 바로 아래 문장부터 if문에 속하는 모든 문장에 들여쓰기(indentation)를 해주어야 한다.

```python
if 조건문:
    수행할 문장1
    수행할 문장2
    수행할 문장3

```

다음처럼 작성하면 오류가 발생한다. "수행할 문장2"를 들여쓰기하지 않았기 때문이다.

```python
if 조건문:
    수행할 문장1
수행할 문장2
    수행할 문장3
```

그렇다면 들여쓰기는 공백(`Spacebar`)으로 하는 것이 좋을까? 아니면 탭(`Tab`)으로 하는 것이 좋을까? 이에 대한 논란은 파이썬을 사용하는 사람들 사이에서 아직도 계속되고 있다. 탭으로 하자는 쪽과 공백으로 하자는 쪽 모두가 동의하는 내용은 단 하나, 2가지를 혼용해서 쓰지는 말자는 것이다. 공백으로 할 거면 항상 공백으로 통일하고, 탭으로 할 거면 항상 탭으로 통일해서 사용하자는 말이다. 탭이나 공백은 프로그램 소스에서 눈으로 보이는 것이 아니기 때문에 혼용해서 쓰면 오류의 원인이 되니 주의하자.

*※ 요즘 파이썬 커뮤니티에서는 들여쓰기를 할 때 공백(`Spacebar`) 4개를 사용하는 것을 권장한다.*

## 조건문이란 무엇인가

**if 조건문** 에서 "조건문"이란 참과 거짓을 판단하는 문장을 말한다.

| 비교연산자 | 설명 |
| --- | --- |
| x < y | x가 y보다 작다 |
| x > y | x가 y보다 크다 |
| x == y | x와 y가 같다 |
| x ! = y | x와 y가 같지 않다 |
| x > = y | x가 y보다 크거나 같다 |
| x < = y | x가 y보다 작거나 같다 |

```python
>>> x = 3
>>> y = 2
>>> x > y
True
```

x에 3을, y에 2를 대입한 다음에 `x > y` 라는 조건문을 수행하면 True를 돌려준다.  `x > y` 조건문이 참이기 때문이다.

```python
"만약 3000원 이상의 돈을 가지고 있으면 택시를 타고 그렇지 않으면 걸어 가라."

위 상황은 다음처럼 프로그래밍할 수 있다.

>>> money = 2000
>>> if money >= 3000:
...     print("택시를 타고 가라")
... else:
...     print("걸어가라")
...
걸어가라
```

## and, or, not

| 연산자 | 설명 |
| --- | --- |
| x or y | x와 y 둘중에 하나만 참이어도 참이다 |
| x and y | x와 y 모두 참이어야 참이다 |
| not x | x가 거짓이면 참이다 |

> "돈이 3000원 이상 있거나 카드가 있다면 택시를 타고 그렇지 않으면 걸어 가라.”
> 

```python
>>> money = 2000
>>> card = True
>>> if money >= 3000 or card:
...     print("택시를 타고 가라")
... else:
...     print("걸어가라")
...
택시를 타고 가라
```

## ****x in s, x not in s****

| in | not in |
| --- | --- |
| x in 리스트 | x not in 리스트 |
| x in 튜플 | x not in 튜플 |
| x in 문자열 | x not in 문자열 |

```python
>>> 1 in [1, 2, 3]
True
>>> 1 not in [1, 2, 3]
False

>>> 'a' in ('a', 'b', 'c')
True
>>> 'j' not in 'python'
True
```

> "만약 주머니에 돈이 있으면 택시를 타고, 없으면 걸어 가라.”
> 

```python
>>> pocket = ['paper', 'cellphone', 'money']
>>> if 'money' in pocket:
...     print("택시를 타고 가라")
... else:
...     print("걸어가라")
...
택시를 타고 가라
```

조건문에서 아무 일도 하지 않게 설정하고 싶다면 pass를 사용한다.

```python
>>> pocket = ['paper', 'money', 'cellphone']
>>> if 'money' in pocket:
...     pass 
... else:
...     print("카드를 꺼내라")
```

## 다양한 조건을 판단하는 elif

if와 else만으로는 다양한 조건을 판단하기 어렵다. 다음 예를 보더라도 if와 else만으로는 조건을 판단하는 데 어려움을 겪게 된다.

elif는 이전 조건문이 거짓일 때 수행된다. if, elif, else를 모두 사용할 때 기본 구조는 다음과 같다.

```python
If <조건문>:
    <수행할 문장1> 
    <수행할 문장2>
    ...
elif <조건문>:
    <수행할 문장1>
    <수행할 문장2>
    ...
elif <조건문>:
    <수행할 문장1>
    <수행할 문장2>
    ...
...
else:
   <수행할 문장1>
   <수행할 문장2>
   ...
```

**[if문을 한 줄로 작성하기]**

앞의 pass를 사용한 예를 보면 if문 다음에 수행할 문장이 한 줄이고, else문 다음에 수행할 문장도 한 줄밖에 되지 않는다.

```python
>>>if 'money'in pocket:
...pass...else:
...     print("카드를 꺼내라")
...

```

이렇게 수행할 문장이 한 줄일 때 조금 더 간략하게 코드를 작성하는 방법이 있다.

```python
>>> pocket = ['paper', 'money', 'cellphone']
>>>if 'money'in pocket:pass...else: print("카드를 꺼내라")
...

```

if문 다음 수행할 문장을 콜론(:) 뒤에 바로 적어 주었다. else문 역시 마찬가지이다.

## 조건부 표현식

```python
if score >= 60:
    message = "success"
else:
    message = "failure"

message = "success" if score >= 60 else "failure"
```